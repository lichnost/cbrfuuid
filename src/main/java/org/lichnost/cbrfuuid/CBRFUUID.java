// Targeted by JavaCPP version 1.4.1: DO NOT EDIT THIS FILE

package org.lichnost.cbrfuuid;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class CBRFUUID extends org.lichnost.cbrfuuid.presets.CBRFUUIDPreset {
    static { Loader.load(); }

// Parsed from uuid.h

/* =================================================================== *
 * Вариант реализации функции генерации первой части уникального       *
 * идентификатора договора (сделки) - универсального уникального       *
 * идентификатора в соответствии с указанием Банка России              *
 * "О правилах присвоения уникального идентификатора договора (сделки),*
 * по обязательствам из которого (из которой) формируется кредитная    *
 * история"                                                            *
 * ===================================================================  */

// #include <stdbool.h>
// #include <stdint.h>

// #ifdef uuid_t
// #undef uuid_t
// #endif

public static class uuid_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public uuid_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public uuid_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public uuid_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public uuid_t position(long position) {
        return (uuid_t)super.position(position);
    }

    public native @Cast("uint32_t") int time_low(); public native uuid_t time_low(int time_low);
    public native @Cast("uint16_t") short time_mid(); public native uuid_t time_mid(short time_mid);
    public native @Cast("uint16_t") short time_hi_and_version(); public native uuid_t time_hi_and_version(short time_hi_and_version);
    public native @Cast("uint8_t") byte clock_seq_hi_and_reserved(); public native uuid_t clock_seq_hi_and_reserved(byte clock_seq_hi_and_reserved);
    public native @Cast("uint8_t") byte clock_seq_low(); public native uuid_t clock_seq_low(byte clock_seq_low);
    public native @Cast("uint8_t") byte node(int i); public native uuid_t node(int i, byte node);
    @MemberGetter public native @Cast("uint8_t*") BytePointer node();
}

/**
 * Инициализация модуля генерации УУИд
 * Данную функцию необходимо вызвать один раз перед первой генерацией УУИд
 * Возвращаемый результат:
 *   true - инициализация выполнена успешно
 *   false - не удалось выполнить инициализацию
 * Если инициализация не выполнена, функция uuid_create() будет завершаться
 * ошибкой или возвращать некорректный результат
 */
@NoException public static native @Cast("bool") boolean uuid_init();

/**
 * Деинициализация модуля генерации УУИд (освобождение ресурсов)
 * Данную функция необходимо вызвать перед завершением работы приложения
 * для освобождения ресурсов, занятых модулем.
 */
@NoException public static native void uuid_deinit();

/**
 * Генерация УУИд
 * uuid - указатель на структуру uuid_t для помещения в нее данные УУИд
 * Возвращаемый результат:
 *   true - если УУИд создан успешно и помещен в структуру
 *   false - если УУИд создать не удалось
 */
@NoException public static native @Cast("bool") boolean uuid_create(uuid_t uuid);


// Parsed from uid.h

/* =================================================================== *
 * Вариант реализации функции генерации уникального идентификатора     *
 * договора (сделки)  в соответствии с указанием Банка России          *
 * "О правилах присвоения уникального идентификатора договора (сделки),*
 * по обязательствам из которого (из которой) формируется кредитная    *
 * история"                                                            *
 * ===================================================================  */


// #include <stdbool.h>

public static final int UID_BUFFER_SIZE = 39;


/**
 * Инициализация модуля генерации УИД.
 * Данную функцию необходимо вызвать один раз перед первой генерацией УИД
 * Возвращаемый результат:
 *   true - инициализация выполнена успешно
 *   false - не удалось выполнить инициализацию
 * Если инициализация не выполнена, функция uid_create() будет завершаться
 * ошибкой или возвращать некорректный результат
 */
@NoException public static native @Cast("bool") boolean uid_init();

/**
 * Деинициализация модуля УИД (освобождение ресурсов).
 * Данную функция необходимо вызвать перед завершением работы приложения
 * для освобождения ресурсов, занятых модулем.
 */
@NoException public static native void uid_deinit();

/**
 * Создание УИД
 * buffer - указатель на буфер длиной не менее 39 байт (38 байт УИД и 1 байт символ конца строки)
 * Возвращаемый результат:
 *   true - если УИД создан успешно и помещен в буфер
 *   false - если УИД создать не удалось
 */
@NoException public static native @Cast("bool") boolean uid_create(@Cast("char*") BytePointer buffer);
@NoException public static native @Cast("bool") boolean uid_create(@Cast("char*") ByteBuffer buffer);
@NoException public static native @Cast("bool") boolean uid_create(@Cast("char*") byte[] buffer);


}
